/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ractoc.fs.templates.editor.entity;

import com.ractoc.fs.es.EntityComponent;
import com.ractoc.fs.parsers.entitytemplate.ComponentParsersCache;
import com.ractoc.fs.parsers.entitytemplate.EntityTemplate;
import com.ractoc.fs.parsers.entitytemplate.TemplateParser;
import com.ractoc.fs.parsers.entitytemplate.TemplateWriter;
import com.ractoc.fs.templates.editor.EtplTopComponent;
import com.ractoc.fs.templates.editor.FieldModifiedListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author ractoc
 */
public class EntityTemplateEditorPanel extends javax.swing.JPanel implements ModificationListener {

    protected static ComponentParsersCache componentParsers = new ComponentParsersCache();
    protected static TemplateParser templateParser = new TemplateParser();
    protected static TemplateWriter templateWriter = new TemplateWriter();
    private DefaultListModel resultList;
    private EtplTopComponent topComponent;
    private EntityTemplate template;
    private ComponentEditorPanel componentEditor;
    private EntityComponent selectedComponent;

    /**
     * Creates new form EntityTemplateEditorPanel
     */
    public EntityTemplateEditorPanel(EtplTopComponent topComponent) {
        this.topComponent = topComponent;
        initComponents();
        clearComponentList();
        setupComponentEditorPanel();
    }

    private void setupComponentEditorPanel() {
        try {
            componentEditor = new ComponentEditorPanel(topComponent);
            componentEditor.setPersistComponentListener(this);
        } catch (IOException ex) {
            topComponent.displayErrorMessage("Unable to create componentEditor.");
            Logger.getLogger(EntityTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleSplitPane = new javax.swing.JSplitPane();
        titleLabel = new javax.swing.JLabel();
        templateName = new javax.swing.JTextField();
        contentSplitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        componentScrollPane = new javax.swing.JScrollPane();
        componentList = new javax.swing.JList();
        emptyComponentPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        titleSplitPane.setDividerLocation(150);

        titleLabel.setText("Template Name");
        titleSplitPane.setLeftComponent(titleLabel);
        titleSplitPane.setRightComponent(templateName);

        add(titleSplitPane, java.awt.BorderLayout.PAGE_START);

        contentSplitPane.setDividerLocation(150);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addButton);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel2.add(removeButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        componentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        componentScrollPane.setViewportView(componentList);

        jPanel1.add(componentScrollPane, java.awt.BorderLayout.CENTER);

        contentSplitPane.setLeftComponent(jPanel1);

        javax.swing.GroupLayout emptyComponentPanelLayout = new javax.swing.GroupLayout(emptyComponentPanel);
        emptyComponentPanel.setLayout(emptyComponentPanelLayout);
        emptyComponentPanelLayout.setHorizontalGroup(
            emptyComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );
        emptyComponentPanelLayout.setVerticalGroup(
            emptyComponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );

        contentSplitPane.setRightComponent(emptyComponentPanel);

        add(contentSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        getSelectedComponent();
        removeSelectedComponent();
        resetComponentPanel();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void getSelectedComponent() {
        int selectedIndex = componentList.getSelectedIndex();
        selectedComponent = (EntityComponent) resultList.remove(selectedIndex);
    }

    private void removeSelectedComponent() {
        template.removeComponent(selectedComponent);
        topComponent.setModified(true);
        componentList.clearSelection();
    }

    private void resetComponentPanel() {
        contentSplitPane.setRightComponent(emptyComponentPanel);
        contentSplitPane.setDividerLocation(150);
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddComponentDialog acd = new AddComponentDialog(topComponent, this);
        acd.setVisible(true);
        if (acd.isOk()) {
            componentList.clearSelection();
            EntityComponent component = acd.getEntityComponent();
            persistComponentToTemplate(component);
            setModified(true);
        }
    }//GEN-LAST:event_addButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JList componentList;
    private javax.swing.JScrollPane componentScrollPane;
    private javax.swing.JSplitPane contentSplitPane;
    private javax.swing.JPanel emptyComponentPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField templateName;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JSplitPane titleSplitPane;
    // End of variables declaration//GEN-END:variables

    public void editTemplate(EntityTemplate template) {
        this.template = template;
        templateName.setText(template.getName());
        templateName.addKeyListener(new FieldModifiedListener(this));
        resetComponentList(template);
    }

    private void resetComponentList(EntityTemplate template) {
        clearComponentList();
        setupComponentList(template);
        refreshComponentList();
    }

    public void displayErrorMessage(String errorMessage) {
        topComponent.displayErrorMessage(errorMessage);
    }

    public EntityTemplate getTemplate() {
        return template;
    }

    public void showComponentEditor(EntityComponent component) {
        if (component != null) {
            componentEditor.createEditorForOldComponent(component);
            contentSplitPane.setRightComponent(componentEditor);
        }
    }

    public void persistComponent() {
        EntityComponent component = componentEditor.getEntityComponent();
        persistComponentToTemplate(component);
    }

    private void refreshComponentList() {
        componentList.invalidate();
        componentList.validate();
    }

    @Override
    public void setModified(boolean b) {
        template.setName(templateName.getText());
        persistComponent();
        topComponent.setModified(b);
    }

    private void persistComponentToTemplate(EntityComponent component) {
        if (component != null) {
            int selectedIndex = componentList.getSelectedIndex();
            if (selectedIndex >= 0) {
                template.removeComponent(component);
                resultList.setElementAt(component, selectedIndex);
            } else {
                resultList.addElement(component);
                componentList.setSelectedValue(component, true);
            }
            template.addComponent(component);
            refreshComponentList();
        }
    }

    private void addEntityComponentsToList(EntityTemplate template) {
        for (EntityComponent component : template.getComponents()) {
            resultList.addElement(component);
        }
    }

    private void setupComponentList(EntityTemplate template) {
        addEntityComponentsToList(template);
        componentList.setCellRenderer(new EntityComponentListRenderer());
        componentList.setModel(resultList);
        componentList.addListSelectionListener(new ComponentSelectedListener(this));
    }

    private void clearComponentList() {
        componentList.removeAll();
        resultList = new DefaultListModel();
    }
}
